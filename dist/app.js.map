{"version":3,"sources":["app.ts"],"names":[],"mappings":";AAAA,QAAO,6BACP,CAAC,CADmC;AACpC,MAAO,cAAc,WAAa,sBAAsB,CAAC,CAAC;AAC1D,MAAO,IAAI,WAAuB,MAAM,CAAC,CAAC;AAC1C,MAAO,EAAE,WAAyB,IAAI,CAAC,CAAA;AAGvC,OAAO,CAAC,OAAO,GAAG,CAAC,OAAW;IAC5B,uBAAuB,aAAqB;QAC1C,IAAI,aAAa,GAAqB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAEhE,IAAI,GAAG,GAAoB,OAAO,CAAC;QACnC,GAAG,CAAC,aAAa,GAAG,aAAa,CAAC;QAGlC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,GAAG,CAAC,gBAAgB,GAAG,OAAO,CAAC,UAAU,CAAC;YAC1C,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC;QAC7C,CAAC;QAGD,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,GAAG,CAAC,iBAAiB,GAAG,OAAO,CAAC,WAAW,CAAC;YAC5C,GAAG,CAAC,oBAAoB,GAAG,OAAO,CAAC,WAAW,CAAC;QACnD,CAAC;QAED,IAAI,OAAO,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,CAAC,OAAO,EAAE,CAAC;IACpB,CAAC;IACC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;IACnE,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,IAAI,KAAK,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,GAAG;gBAC9B,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBACzB,IAAI,aAAa,GAAG,EAAE,CAAC;gBACvB,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAW;oBACvB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;oBACnC,aAAa,IAAI,IAAI,CAAC;gBAC1B,CAAC,CAAC,CAAC;gBAEH,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE;oBAEV,aAAa,CAAC,aAAa,CAAC,CAAA;gBAChC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAK;gBACjB,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YAGN,aAAa,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAA;QAC9D,CAAC;IACL,CAAC;AACL,CAAC,CAAA","file":"app.js","sourcesContent":["import 'source-map-support/register'//to get ts stacktraces\r\nimport swaggerService   = require(\"./lib/SwaggerService\");\r\nimport http             = require(\"http\");\r\nimport fs               = require(\"fs\")\r\n\r\n\r\nexports.process = (options:any) => {\r\n  function runConversion(swaggerString: string) {\r\n    var swaggerObject: Swagger.ISwagger = JSON.parse(swaggerString);\r\n\r\n    var opt: ISwaggerOptions = options;\r\n    opt.swaggerObject = swaggerObject;\r\n\r\n    // for backwards compatibility\r\n    if (options.moduleName) {\r\n        opt.clientModuleName = options.moduleName;\r\n        opt.modelModuleName = options.moduleName;\r\n    }\r\n\r\n    // for backwards compatibility\r\n    if (options.destination) {\r\n        opt.clientDestination = options.destination;\r\n        opt.interfaceDestination = options.destination;\r\n    }\r\n\r\n    var swagSrv = new swaggerService(opt);\r\n    swagSrv.process();\r\n  }\r\n    if (!options) {\r\n        console.error(\"Sorry. Please supply options with swaggerPath\");\r\n    } else {\r\n        if (options.swaggerLocation == \"url\") {\r\n          http.get(options.swaggerPath, (res) => {\r\n              res.setEncoding(\"utf-8\");\r\n              var swaggerString = \"\";\r\n              res.on(\"data\", (data:string) => {\r\n                  console.log(\"Swagger json found!\");\r\n                  swaggerString += data;\r\n              });\r\n\r\n              res.on(\"end\", () => {\r\n                  // swagger object coming from server\r\n                  runConversion(swaggerString)\r\n              });\r\n          }).on(\"error\", (e:any) => {\r\n              console.log(\"Error : \" + e.message);\r\n          });\r\n        } else {\r\n          //assuming 'local' swagger files.\r\n          //usying sync. no use doing async stuff\r\n          runConversion(fs.readFileSync(options.swaggerPath, 'UTF-8'))\r\n        }\r\n    }\r\n}\r\n"]}